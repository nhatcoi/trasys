const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testSimpleLeaveRequests() {
    try {
        console.log('üß™ Test h·ªá th·ªëng ƒë∆°n xin ngh·ªâ ƒë∆°n gi·∫£n...\n');

        // Test 1: Ki·ªÉm tra b·∫£ng leave_requests
        console.log('1Ô∏è‚É£ Ki·ªÉm tra b·∫£ng leave_requests:');
        const leaveRequests = await prisma.leave_requests.findMany({
            include: {
                employees: {
                    include: {
                        user: true
                    }
                }
            },
            take: 3
        });

        console.log(`   üìã T√¨m th·∫•y ${leaveRequests.length} leave requests:`);
        leaveRequests.forEach(req => {
            console.log(`      - ID: ${req.id}`);
            console.log(`        Nh√¢n vi√™n: ${req.employees.user.full_name}`);
            console.log(`        Lo·∫°i: ${req.leave_type}`);
            console.log(`        Tr·∫°ng th√°i: ${req.status}`);
            console.log(`        T·ª´: ${req.start_date.toISOString().split('T')[0]}`);
            console.log(`        ƒê·∫øn: ${req.end_date.toISOString().split('T')[0]}`);
        });

        // Test 2: T·∫°o ƒë∆°n xin ngh·ªâ m·ªõi
        console.log('\n2Ô∏è‚É£ T·∫°o ƒë∆°n xin ngh·ªâ m·ªõi:');
        const testUser = await prisma.user.findFirst({
            where: { username: 'admin' },
            include: {
                employees: true
            }
        });

        if (testUser && testUser.employees[0]) {
            const employee = testUser.employees[0];

            const newLeaveRequest = await prisma.leave_requests.create({
                data: {
                    employee_id: employee.id,
                    leave_type: 'PERSONAL',
                    start_date: new Date('2024-02-01'),
                    end_date: new Date('2024-02-03'),
                    reason: 'Ngh·ªâ c√° nh√¢n',
                    status: 'PENDING'
                }
            });

            console.log(`   ‚úÖ ƒê√£ t·∫°o leave request ID: ${newLeaveRequest.id}`);

            // T·∫°o log trong employee_log
            await prisma.employee_log.create({
                data: {
                    employee_id: employee.id,
                    action: 'CREATE',
                    entity_type: 'leave_request',
                    entity_id: newLeaveRequest.id,
                    reason: 'ƒê∆°n xin ngh·ªâ ƒë∆∞·ª£c t·∫°o',
                    actor_id: testUser.id,
                    actor_role: 'EMPLOYEE'
                }
            });

            console.log(`   ‚úÖ ƒê√£ t·∫°o employee log cho leave request`);
        }

        // Test 3: Ki·ªÉm tra employee_logs cho leave_requests
        console.log('\n3Ô∏è‚É£ Ki·ªÉm tra employee_logs cho leave_requests:');
        const leaveLogs = await prisma.employee_log.findMany({
            where: {
                entity_type: 'leave_request'
            },
            include: {
                employees: {
                    include: {
                        user: true
                    }
                },
                users: true
            },
            take: 3
        });

        console.log(`   üìù T√¨m th·∫•y ${leaveLogs.length} logs cho leave_requests:`);
        leaveLogs.forEach(log => {
            console.log(`      - ID: ${log.id}`);
            console.log(`        Nh√¢n vi√™n: ${log.employees.user.full_name}`);
            console.log(`        H√†nh ƒë·ªông: ${log.action}`);
            console.log(`        Entity ID: ${log.entity_id}`);
            console.log(`        Ng∆∞·ªùi th·ª±c hi·ªán: ${log.users?.full_name || 'System'}`);
            console.log(`        L√Ω do: ${log.reason}`);
        });

        // Test 4: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n xin ngh·ªâ
        console.log('\n4Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n xin ngh·ªâ:');
        const pendingRequest = await prisma.leave_requests.findFirst({
            where: { status: 'PENDING' }
        });

        if (pendingRequest) {
            const updatedRequest = await prisma.leave_requests.update({
                where: { id: pendingRequest.id },
                data: {
                    status: 'APPROVED',
                    updated_at: new Date()
                }
            });

            // T·∫°o log cho vi·ªác duy·ªát
            await prisma.employee_log.create({
                data: {
                    employee_id: pendingRequest.employee_id,
                    action: 'UPDATE',
                    entity_type: 'leave_request',
                    entity_id: pendingRequest.id,
                    reason: 'ƒê∆°n xin ngh·ªâ ƒë∆∞·ª£c duy·ªát',
                    actor_id: testUser.id,
                    actor_role: 'ADMIN'
                }
            });

            console.log(`   ‚úÖ ƒê√£ duy·ªát leave request ID: ${pendingRequest.id}`);
        }

        console.log('\n‚úÖ Test ho√†n th√†nh!');
        console.log('\nüìã T√≥m t·∫Øt:');
        console.log('   ‚úÖ B·∫£ng leave_requests ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
        console.log('   ‚úÖ C√≥ th·ªÉ t·∫°o ƒë∆°n xin ngh·ªâ m·ªõi');
        console.log('   ‚úÖ Employee_log l∆∞u l·ªãch s·ª≠ thay th·∫ø leave_request_history');
        console.log('   ‚úÖ C√≥ th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n xin ngh·ªâ');
        console.log('   ‚úÖ H·ªá th·ªëng ƒë∆°n gi·∫£n v√† hi·ªáu qu·∫£');

    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        await prisma.$disconnect();
    }
}

testSimpleLeaveRequests();
