const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addLeaveRequestPermissions() {
    try {
        console.log('üîê Th√™m permissions cho leave requests...\n');

        // Danh s√°ch permissions c·∫ßn th√™m
        const permissions = [
            { code: 'hr.leave_requests.view', name: 'Xem ƒë∆°n xin ngh·ªâ' },
            { code: 'hr.leave_requests.create', name: 'T·∫°o ƒë∆°n xin ngh·ªâ' },
            { code: 'hr.leave_requests.update', name: 'C·∫≠p nh·∫≠t ƒë∆°n xin ngh·ªâ' },
            { code: 'hr.leave_requests.delete', name: 'X√≥a ƒë∆°n xin ngh·ªâ' },
            { code: 'hr.leave_requests.approve', name: 'Duy·ªát ƒë∆°n xin ngh·ªâ' },
            { code: 'hr.leave_requests.history', name: 'Xem l·ªãch s·ª≠ ƒë∆°n xin ngh·ªâ' },
            { code: 'hr.employee_changes.history', name: 'Xem l·ªãch s·ª≠ s·ª≠a ƒë·ªïi nh√¢n vi√™n' }
        ];

        // Th√™m permissions
        for (const permission of permissions) {
            const existing = await prisma.permissions.findUnique({
                where: { code: permission.code }
            });

            if (!existing) {
                await prisma.permissions.create({
                    data: permission
                });
                console.log(`‚úÖ ƒê√£ th√™m permission: ${permission.code}`);
            } else {
                console.log(`‚ö†Ô∏è  Permission ƒë√£ t·ªìn t·∫°i: ${permission.code}`);
            }
        }

        // L·∫•y t·∫•t c·∫£ roles
        const roles = await prisma.roles.findMany();
        console.log(`\nüìã T√¨m th·∫•y ${roles.length} roles:`);
        roles.forEach(role => console.log(`  - ${role.name} (${role.code})`));

        // ƒê·ªãnh nghƒ©a permissions cho t·ª´ng role
        const rolePermissions = {
            'ADMIN': [
                'hr.leave_requests.view',
                'hr.leave_requests.create',
                'hr.leave_requests.update',
                'hr.leave_requests.delete',
                'hr.leave_requests.approve',
                'hr.leave_requests.history',
                'hr.employee_changes.history'
            ],
            'RECTOR': [
                'hr.leave_requests.view',
                'hr.leave_requests.approve',
                'hr.leave_requests.history',
                'hr.employee_changes.history'
            ],
            'DEAN': [
                'hr.leave_requests.view',
                'hr.leave_requests.approve',
                'hr.leave_requests.history',
                'hr.employee_changes.history'
            ],
            'HEAD_DEPARTMENT': [
                'hr.leave_requests.view',
                'hr.leave_requests.approve',
                'hr.leave_requests.history',
                'hr.employee_changes.history'
            ],
            'LECTURER': [
                'hr.leave_requests.view',
                'hr.leave_requests.create',
                'hr.leave_requests.update',
                'hr.leave_requests.delete',
                'hr.leave_requests.history'
            ],
            'STAFF': [
                'hr.leave_requests.view',
                'hr.leave_requests.create',
                'hr.leave_requests.update',
                'hr.leave_requests.delete',
                'hr.leave_requests.history'
            ],
            'STUDENT': [
                'hr.leave_requests.view',
                'hr.leave_requests.create',
                'hr.leave_requests.update',
                'hr.leave_requests.delete',
                'hr.leave_requests.history'
            ]
        };

        // G√°n permissions cho t·ª´ng role
        for (const [roleCode, permissionCodes] of Object.entries(rolePermissions)) {
            const role = roles.find(r => r.code === roleCode);
            if (!role) {
                console.log(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y role: ${roleCode}`);
                continue;
            }

            console.log(`\nüé≠ C·∫≠p nh·∫≠t permissions cho role: ${role.name}`);

            // X√≥a permissions c≈© li√™n quan ƒë·∫øn leave requests
            await prisma.role_permission.deleteMany({
                where: {
                    role_id: role.id,
                    permissions: {
                        code: {
                            in: permissionCodes
                        }
                    }
                }
            });

            // Th√™m permissions m·ªõi
            for (const permissionCode of permissionCodes) {
                const permission = await prisma.permissions.findUnique({
                    where: { code: permissionCode }
                });

                if (permission) {
                    await prisma.role_permission.create({
                        data: {
                            role_id: role.id,
                            permission_id: permission.id
                        }
                    });
                    console.log(`  ‚úÖ ƒê√£ g√°n: ${permissionCode}`);
                } else {
                    console.log(`  ‚ùå Kh√¥ng t√¨m th·∫•y permission: ${permissionCode}`);
                }
            }
        }

        console.log('\n‚úÖ Ho√†n th√†nh th√™m permissions cho leave requests!');

    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        await prisma.$disconnect();
    }
}

addLeaveRequestPermissions();
