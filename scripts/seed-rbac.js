const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function seedRBAC() {
    try {
        console.log('üå± Seeding RBAC data...');

        // 1. T·∫°o permissions
        const permissions = [
            // Dashboard
            { code: 'hr.dashboard.view', name: 'Xem Dashboard HR' },

            // Employees
            { code: 'hr.employees.view', name: 'Xem danh s√°ch nh√¢n vi√™n' },
            { code: 'hr.employees.create', name: 'T·∫°o nh√¢n vi√™n m·ªõi' },
            { code: 'hr.employees.update', name: 'C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n' },
            { code: 'hr.employees.delete', name: 'X√≥a nh√¢n vi√™n' },

            // Roles
            { code: 'hr.roles.view', name: 'Xem danh s√°ch vai tr√≤' },
            { code: 'hr.roles.create', name: 'T·∫°o vai tr√≤ m·ªõi' },
            { code: 'hr.roles.update', name: 'C·∫≠p nh·∫≠t vai tr√≤' },
            { code: 'hr.roles.delete', name: 'X√≥a vai tr√≤' },

            // Permissions
            { code: 'hr.permissions.view', name: 'Xem danh s√°ch quy·ªÅn h·∫°n' },
            { code: 'hr.permissions.create', name: 'T·∫°o quy·ªÅn h·∫°n m·ªõi' },
            { code: 'hr.permissions.update', name: 'C·∫≠p nh·∫≠t quy·ªÅn h·∫°n' },
            { code: 'hr.permissions.delete', name: 'X√≥a quy·ªÅn h·∫°n' },

            // Role Permissions
            { code: 'hr.role_permissions.view', name: 'Xem ph√¢n quy·ªÅn vai tr√≤' },
            { code: 'hr.role_permissions.create', name: 'T·∫°o ph√¢n quy·ªÅn vai tr√≤' },
            { code: 'hr.role_permissions.delete', name: 'X√≥a ph√¢n quy·ªÅn vai tr√≤' },

            // User Roles
            { code: 'hr.user_roles.view', name: 'Xem ph√¢n quy·ªÅn ng∆∞·ªùi d√πng' },
            { code: 'hr.user_roles.create', name: 'T·∫°o ph√¢n quy·ªÅn ng∆∞·ªùi d√πng' },
            { code: 'hr.user_roles.delete', name: 'X√≥a ph√¢n quy·ªÅn ng∆∞·ªùi d√πng' },

            // Employee Logs
            { code: 'hr.employee_logs.view', name: 'Xem nh·∫≠t k√Ω nh√¢n vi√™n' },

            // Performance Reviews
            { code: 'hr.performance_reviews.view', name: 'Xem ƒë√°nh gi√° hi·ªáu su·∫•t' },
            { code: 'hr.performance_reviews.create', name: 'T·∫°o ƒë√°nh gi√° hi·ªáu su·∫•t' },

            // Academic Titles
            { code: 'hr.academic_titles.view', name: 'Xem h·ªçc h√†m h·ªçc v·ªã' },
            { code: 'hr.academic_titles.create', name: 'T·∫°o h·ªçc h√†m h·ªçc v·ªã' },
            { code: 'hr.academic_titles.update', name: 'C·∫≠p nh·∫≠t h·ªçc h√†m h·ªçc v·ªã' },
            { code: 'hr.academic_titles.delete', name: 'X√≥a h·ªçc h√†m h·ªçc v·ªã' },

            // Employee Academic Titles
            { code: 'hr.employee_academic_titles.view', name: 'Xem h·ªçc h√†m nh√¢n vi√™n' },
            { code: 'hr.employee_academic_titles.create', name: 'T·∫°o h·ªçc h√†m nh√¢n vi√™n' },
            { code: 'hr.employee_academic_titles.update', name: 'C·∫≠p nh·∫≠t h·ªçc h√†m nh√¢n vi√™n' },
            { code: 'hr.employee_academic_titles.delete', name: 'X√≥a h·ªçc h√†m nh√¢n vi√™n' },

            // Trainings
            { code: 'hr.trainings.view', name: 'Xem kh√≥a ƒë√†o t·∫°o' },
            { code: 'hr.trainings.create', name: 'T·∫°o kh√≥a ƒë√†o t·∫°o' },
            { code: 'hr.trainings.update', name: 'C·∫≠p nh·∫≠t kh√≥a ƒë√†o t·∫°o' },
            { code: 'hr.trainings.delete', name: 'X√≥a kh√≥a ƒë√†o t·∫°o' },

            // Employee Trainings
            { code: 'hr.employee_trainings.view', name: 'Xem ƒë√†o t·∫°o nh√¢n vi√™n' },
            { code: 'hr.employee_trainings.create', name: 'T·∫°o ƒë√†o t·∫°o nh√¢n vi√™n' },
            { code: 'hr.employee_trainings.update', name: 'C·∫≠p nh·∫≠t ƒë√†o t·∫°o nh√¢n vi√™n' },
            { code: 'hr.employee_trainings.delete', name: 'X√≥a ƒë√†o t·∫°o nh√¢n vi√™n' },

            // Qualifications
            { code: 'hr.qualifications.view', name: 'Xem b·∫±ng c·∫•p' },
            { code: 'hr.qualifications.create', name: 'T·∫°o b·∫±ng c·∫•p' },
            { code: 'hr.qualifications.update', name: 'C·∫≠p nh·∫≠t b·∫±ng c·∫•p' },
            { code: 'hr.qualifications.delete', name: 'X√≥a b·∫±ng c·∫•p' },

            // Employee Qualifications
            { code: 'hr.employee_qualifications.view', name: 'Xem b·∫±ng c·∫•p nh√¢n vi√™n' },
            { code: 'hr.employee_qualifications.create', name: 'T·∫°o b·∫±ng c·∫•p nh√¢n vi√™n' },
            { code: 'hr.employee_qualifications.update', name: 'C·∫≠p nh·∫≠t b·∫±ng c·∫•p nh√¢n vi√™n' },
            { code: 'hr.employee_qualifications.delete', name: 'X√≥a b·∫±ng c·∫•p nh√¢n vi√™n' },

            // Employments
            { code: 'hr.employments.view', name: 'Xem h·ª£p ƒë·ªìng lao ƒë·ªông' },
            { code: 'hr.employments.create', name: 'T·∫°o h·ª£p ƒë·ªìng lao ƒë·ªông' },
            { code: 'hr.employments.update', name: 'C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng lao ƒë·ªông' },
            { code: 'hr.employments.delete', name: 'X√≥a h·ª£p ƒë·ªìng lao ƒë·ªông' },

            // Organization
            { code: 'hr.org_structure.view', name: 'Xem c∆° c·∫•u t·ªï ch·ª©c' },
            { code: 'hr.org_tree.view', name: 'Xem c√¢y t·ªï ch·ª©c' },
            { code: 'hr.faculty.view', name: 'Xem gi·∫£ng vi√™n' },
            { code: 'hr.university_overview.view', name: 'Xem t·ªïng quan ƒë·∫°i h·ªçc' },

            // Reports
            { code: 'hr.reports.view', name: 'Xem b√°o c√°o' },

            // Profile
            { code: 'hr.profile.view', name: 'Xem h·ªì s∆° c√° nh√¢n' },
            { code: 'hr.profile.update', name: 'C·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n' },
        ];

        console.log('üìù Creating permissions...');
        for (const permission of permissions) {
            await prisma.permissions.upsert({
                where: { code: permission.code },
                update: permission,
                create: permission,
            });
        }

        // 2. T·∫°o roles
        const roles = [
            {
                code: 'ADMIN',
                name: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng'
            },
            {
                code: 'HEAD_FACULTY',
                name: 'Tr∆∞·ªüng khoa'
            },
            {
                code: 'LECTURER',
                name: 'Gi·∫£ng vi√™n'
            },
            {
                code: 'STAFF',
                name: 'Nh√¢n vi√™n'
            },
            {
                code: 'STUDENT',
                name: 'Sinh vi√™n'
            }
        ];

        console.log('üë• Creating roles...');
        for (const role of roles) {
            await prisma.roles.upsert({
                where: { code: role.code },
                update: role,
                create: role,
            });
        }

        // 3. G√°n permissions cho roles
        console.log('üîó Assigning permissions to roles...');

        // Admin - t·∫•t c·∫£ quy·ªÅn
        const adminRole = await prisma.roles.findUnique({ where: { code: 'ADMIN' } });
        const allPermissions = await prisma.permissions.findMany();
        for (const permission of allPermissions) {
            await prisma.role_permission.upsert({
                where: {
                    role_id_permission_id: {
                        role_id: adminRole.id,
                        permission_id: permission.id
                    }
                },
                update: {},
                create: {
                    role_id: adminRole.id,
                    permission_id: permission.id
                }
            });
        }

        // Head Faculty - quy·ªÅn qu·∫£n l√Ω khoa
        const headFacultyRole = await prisma.roles.findUnique({ where: { code: 'HEAD_FACULTY' } });
        const headFacultyPermissions = [
            'hr.dashboard.view',
            'hr.employees.view',
            'hr.employees.create',
            'hr.employees.update',
            'hr.performance_reviews.view',
            'hr.performance_reviews.create',
            'hr.academic_titles.view',
            'hr.employee_academic_titles.view',
            'hr.employee_academic_titles.create',
            'hr.trainings.view',
            'hr.employee_trainings.view',
            'hr.employee_trainings.create',
            'hr.qualifications.view',
            'hr.employee_qualifications.view',
            'hr.employee_qualifications.create',
            'hr.employments.view',
            'hr.org_structure.view',
            'hr.faculty.view',
            'hr.reports.view',
            'hr.profile.view',
            'hr.profile.update'
        ];

        for (const permCode of headFacultyPermissions) {
            const permission = await prisma.permissions.findUnique({ where: { code: permCode } });
            if (permission) {
                await prisma.role_permission.upsert({
                    where: {
                        role_id_permission_id: {
                            role_id: headFacultyRole.id,
                            permission_id: permission.id
                        }
                    },
                    update: {},
                    create: {
                        role_id: headFacultyRole.id,
                        permission_id: permission.id
                    }
                });
            }
        }

        // Lecturer - quy·ªÅn c∆° b·∫£n
        const lecturerRole = await prisma.roles.findUnique({ where: { code: 'LECTURER' } });
        const lecturerPermissions = [
            'hr.dashboard.view',
            'hr.employees.view',
            'hr.performance_reviews.view',
            'hr.academic_titles.view',
            'hr.employee_academic_titles.view',
            'hr.trainings.view',
            'hr.employee_trainings.view',
            'hr.qualifications.view',
            'hr.employee_qualifications.view',
            'hr.employments.view',
            'hr.faculty.view',
            'hr.profile.view',
            'hr.profile.update'
        ];

        for (const permCode of lecturerPermissions) {
            const permission = await prisma.permissions.findUnique({ where: { code: permCode } });
            if (permission) {
                await prisma.role_permission.upsert({
                    where: {
                        role_id_permission_id: {
                            role_id: lecturerRole.id,
                            permission_id: permission.id
                        }
                    },
                    update: {},
                    create: {
                        role_id: lecturerRole.id,
                        permission_id: permission.id
                    }
                });
            }
        }

        // Staff - quy·ªÅn h√†nh ch√≠nh
        const staffRole = await prisma.roles.findUnique({ where: { code: 'STAFF' } });
        const staffPermissions = [
            'hr.dashboard.view',
            'hr.employees.view',
            'hr.employees.create',
            'hr.employees.update',
            'hr.qualifications.view',
            'hr.employee_qualifications.view',
            'hr.employee_qualifications.create',
            'hr.employments.view',
            'hr.employments.create',
            'hr.employments.update',
            'hr.org_structure.view',
            'hr.reports.view',
            'hr.profile.view',
            'hr.profile.update'
        ];

        for (const permCode of staffPermissions) {
            const permission = await prisma.permissions.findUnique({ where: { code: permCode } });
            if (permission) {
                await prisma.role_permission.upsert({
                    where: {
                        role_id_permission_id: {
                            role_id: staffRole.id,
                            permission_id: permission.id
                        }
                    },
                    update: {},
                    create: {
                        role_id: staffRole.id,
                        permission_id: permission.id
                    }
                });
            }
        }

        // Student - quy·ªÅn t·ªëi thi·ªÉu
        const studentRole = await prisma.roles.findUnique({ where: { code: 'STUDENT' } });
        const studentPermissions = [
            'hr.dashboard.view',
            'hr.profile.view',
            'hr.profile.update'
        ];

        for (const permCode of studentPermissions) {
            const permission = await prisma.permissions.findUnique({ where: { code: permCode } });
            if (permission) {
                await prisma.role_permission.upsert({
                    where: {
                        role_id_permission_id: {
                            role_id: studentRole.id,
                            permission_id: permission.id
                        }
                    },
                    update: {},
                    create: {
                        role_id: studentRole.id,
                        permission_id: permission.id
                    }
                });
            }
        }

        // 4. T·∫°o user admin m·∫´u v√† g√°n role
        console.log('üë§ Creating admin user...');
        const hashedPassword = await bcrypt.hash('admin123', 10);

        let adminUser = await prisma.user.findFirst({
            where: {
                OR: [
                    { email: 'admin@trasys.com' },
                    { username: 'admin' }
                ]
            }
        });

        if (!adminUser) {
            adminUser = await prisma.user.create({
                data: {
                    username: 'admin',
                    email: 'admin@trasys.com',
                    full_name: 'Administrator',
                    password_hash: hashedPassword
                }
            });
        }

        // G√°n role ADMIN cho user admin
        await prisma.user_role.upsert({
            where: {
                user_id_role_id: {
                    user_id: adminUser.id,
                    role_id: adminRole.id
                }
            },
            update: {},
            create: {
                user_id: adminUser.id,
                role_id: adminRole.id
            }
        });

        console.log('‚úÖ RBAC seeding completed!');
        console.log('üìã Summary:');
        console.log(`   - ${permissions.length} permissions created`);
        console.log(`   - ${roles.length} roles created`);
        console.log(`   - Role-permission assignments created`);
        console.log(`   - Admin user created (admin@trasys.com / admin123)`);

    } catch (error) {
        console.error('‚ùå Error seeding RBAC:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

seedRBAC();
