const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function generateLoginCredentials() {
    try {
        console.log('üöÄ T·∫°o file th√¥ng tin ƒëƒÉng nh·∫≠p...\n');

        // L·∫•y danh s√°ch roles
        const roles = await prisma.roles.findMany({
            orderBy: { code: 'asc' }
        });

        let csvContent = 'Role,Username,Password,Full Name,Email,Phone,Status\n';
        let totalAccounts = 0;

        for (const role of roles) {
            console.log(`üîπ X·ª≠ l√Ω role: ${role.code}`);

            // L·∫•y users c√≥ role n√†y
            const userRoles = await prisma.user_role.findMany({
                where: { role_id: role.id },
                include: {
                    users: true
                }
            });

            for (const userRole of userRoles) {
                const user = userRole.users;

                // T·∫°o password m·∫∑c ƒë·ªãnh d·ª±a tr√™n role
                let defaultPassword = '';
                switch (role.code) {
                    case 'ADMIN':
                        defaultPassword = 'admin123';
                        break;
                    case 'HEAD_FACULTY':
                        defaultPassword = 'truongkhoa123';
                        break;
                    case 'LECTURER':
                        defaultPassword = 'giangvien123';
                        break;
                    case 'STAFF':
                        defaultPassword = 'nhanvien123';
                        break;
                    case 'STUDENT':
                        defaultPassword = 'sinhvien123';
                        break;
                    default:
                        defaultPassword = 'password123';
                }

                // Th√™m v√†o CSV
                csvContent += `"${role.name}","${user.username}","${defaultPassword}","${user.full_name}","${user.email || ''}","${user.phone || ''}","${user.status}"\n`;
                totalAccounts++;
            }
        }

        // Ghi file CSV
        const csvPath = path.join(__dirname, 'login-credentials.csv');
        fs.writeFileSync(csvPath, csvContent, 'utf8');

        console.log(`\n‚úÖ ƒê√£ t·∫°o file: ${csvPath}`);
        console.log(`üìä T·ªïng s·ªë accounts: ${totalAccounts}`);

        // T·∫°o file README
        const readmeContent = `# TH√îNG TIN ƒêƒÇNG NH·∫¨P H·ªÜ TH·ªêNG

## T·ªïng quan
File n√†y ch·ª©a th√¥ng tin ƒëƒÉng nh·∫≠p cho t·∫•t c·∫£ accounts trong h·ªá th·ªëng HR Management.

## C·∫•u tr√∫c file
- **login-credentials.csv**: File CSV ch·ª©a th√¥ng tin ƒëƒÉng nh·∫≠p
- **login-credentials.json**: File JSON ch·ª©a th√¥ng tin ƒëƒÉng nh·∫≠p (d·ªÖ ƒë·ªçc h∆°n)

## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
1. M·ªü file CSV b·∫±ng Excel ho·∫∑c Google Sheets
2. T√¨m username c·∫ßn ƒëƒÉng nh·∫≠p
3. S·ª≠ d·ª•ng password t∆∞∆°ng ·ª©ng

## M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh theo role
- **ADMIN**: admin123
- **HEAD_FACULTY**: truongkhoa123  
- **LECTURER**: giangvien123
- **STAFF**: nhanvien123
- **STUDENT**: sinhvien123

## L∆∞u √Ω b·∫£o m·∫≠t
‚ö†Ô∏è **QUAN TR·ªåNG**: ƒê√¢y l√† m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh. Vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u sau khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu!

## Th·ªëng k√™
- T·ªïng s·ªë accounts: ${totalAccounts}
- S·ªë roles: ${roles.length}
- Ng√†y t·∫°o: ${new Date().toLocaleString('vi-VN')}

---
*File ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi h·ªá th·ªëng HR Management*
`;

        const readmePath = path.join(__dirname, 'README-credentials.md');
        fs.writeFileSync(readmePath, readmeContent, 'utf8');

        console.log(`‚úÖ ƒê√£ t·∫°o file: ${readmePath}`);

        // T·∫°o file JSON cho d·ªÖ ƒë·ªçc
        const jsonData = [];
        for (const role of roles) {
            const userRoles = await prisma.user_role.findMany({
                where: { role_id: role.id },
                include: {
                    users: true
                }
            });

            for (const userRole of userRoles) {
                const user = userRole.users;

                let defaultPassword = '';
                switch (role.code) {
                    case 'ADMIN':
                        defaultPassword = 'admin123';
                        break;
                    case 'HEAD_FACULTY':
                        defaultPassword = 'truongkhoa123';
                        break;
                    case 'LECTURER':
                        defaultPassword = 'giangvien123';
                        break;
                    case 'STAFF':
                        defaultPassword = 'nhanvien123';
                        break;
                    case 'STUDENT':
                        defaultPassword = 'sinhvien123';
                        break;
                    default:
                        defaultPassword = 'password123';
                }

                jsonData.push({
                    role: role.name,
                    roleCode: role.code,
                    username: user.username,
                    password: defaultPassword,
                    fullName: user.full_name,
                    email: user.email,
                    phone: user.phone,
                    status: user.status
                });
            }
        }

        const jsonPath = path.join(__dirname, 'login-credentials.json');
        fs.writeFileSync(jsonPath, JSON.stringify(jsonData, null, 2), 'utf8');

        console.log(`‚úÖ ƒê√£ t·∫°o file: ${jsonPath}`);

        console.log('\nüéâ Ho√†n th√†nh! ƒê√£ t·∫°o c√°c file:');
        console.log(`üìÑ ${csvPath}`);
        console.log(`üìÑ ${readmePath}`);
        console.log(`üìÑ ${jsonPath}`);

    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y script
generateLoginCredentials();
