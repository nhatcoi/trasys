const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function importStandardData() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu import data chu·∫©n thi·∫øt k·∫ø...\n');

        // 1. T·∫°o Organizational Units chu·∫©n
        console.log('üìä T·∫°o c·∫•u tr√∫c t·ªï ch·ª©c...');

        const orgUnits = [
            // C·∫•p 1: ƒê·∫°i h·ªçc
            { code: 'PHENIKAA', name: 'ƒê·∫°i h·ªçc Phenikaa', type: 'U', parent_id: null },

            // C·∫•p 2: Tr∆∞·ªùng
            { code: 'ICT', name: 'Tr∆∞·ªùng C√¥ng ngh·ªá Th√¥ng tin', type: 'S', parent_id: 'PHENIKAA' },
            { code: 'MED', name: 'Tr∆∞·ªùng Y D∆∞·ª£c', type: 'S', parent_id: 'PHENIKAA' },
            { code: 'ECO', name: 'Tr∆∞·ªùng Kinh t·∫ø', type: 'S', parent_id: 'PHENIKAA' },

            // C·∫•p 3: Khoa (thu·ªôc Tr∆∞·ªùng ICT)
            { code: 'SE', name: 'Khoa C√¥ng ngh·ªá Ph·∫ßn m·ªÅm', type: 'F', parent_id: 'ICT' },
            { code: 'IS', name: 'Khoa H·ªá th·ªëng Th√¥ng tin', type: 'F', parent_id: 'ICT' },
            { code: 'CS', name: 'Khoa Khoa h·ªçc M√°y t√≠nh', type: 'F', parent_id: 'ICT' },

            // C·∫•p 3: Khoa (thu·ªôc Tr∆∞·ªùng Y D∆∞·ª£c)
            { code: 'PHARM', name: 'Khoa D∆∞·ª£c', type: 'F', parent_id: 'MED' },
            { code: 'NURSING', name: 'Khoa ƒêi·ªÅu d∆∞·ª°ng', type: 'F', parent_id: 'MED' },

            // C·∫•p 3: Khoa (thu·ªôc Tr∆∞·ªùng Kinh t·∫ø)
            { code: 'BA', name: 'Khoa Qu·∫£n tr·ªã Kinh doanh', type: 'F', parent_id: 'ECO' },
            { code: 'FIN', name: 'Khoa T√†i ch√≠nh - Ng√¢n h√†ng', type: 'F', parent_id: 'ECO' },

            // C·∫•p 4: B·ªô m√¥n (thu·ªôc Khoa SE)
            { code: 'SWE', name: 'B·ªô m√¥n K·ªπ thu·∫≠t Ph·∫ßn m·ªÅm', type: 'D', parent_id: 'SE' },
            { code: 'DB', name: 'B·ªô m√¥n C∆° s·ªü D·ªØ li·ªáu', type: 'D', parent_id: 'SE' },

            // C·∫•p 4: B·ªô m√¥n (thu·ªôc Khoa IS)
            { code: 'ECOM', name: 'B·ªô m√¥n Th∆∞∆°ng m·∫°i ƒêi·ªán t·ª≠', type: 'D', parent_id: 'IS' },
            { code: 'ERP', name: 'B·ªô m√¥n H·ªá th·ªëng ERP', type: 'D', parent_id: 'IS' },
        ];

        const createdOrgUnits = {};

        for (const unit of orgUnits) {
            const parentId = unit.parent_id ? createdOrgUnits[unit.parent_id]?.id : null;

            // Check if org unit already exists
            let orgUnit = await prisma.orgUnit.findFirst({
                where: { code: unit.code }
            });

            if (orgUnit) {
                // Update existing
                orgUnit = await prisma.orgUnit.update({
                    where: { id: orgUnit.id },
                    data: {
                        name: unit.name,
                        type: unit.type,
                        parent_id: parentId
                    }
                });
            } else {
                // Create new
                orgUnit = await prisma.orgUnit.create({
                    data: {
                        code: unit.code,
                        name: unit.name,
                        type: unit.type,
                        parent_id: parentId,
                        status: 'active'
                    }
                });
            }

            createdOrgUnits[unit.code] = orgUnit;
            console.log(`  ‚úÖ ${unit.name} (${unit.code})`);
        }

        // 2. T·∫°o Job Positions
        console.log('\nüëî T·∫°o ch·ª©c v·ª•...');

        const positions = [
            { code: 'RECTOR', title: 'Hi·ªáu tr∆∞·ªüng', grade: '1' },
            { code: 'VICE_RECTOR', title: 'Ph√≥ Hi·ªáu tr∆∞·ªüng', grade: '2' },
            { code: 'DEAN', title: 'Tr∆∞·ªüng khoa', grade: '3' },
            { code: 'VICE_DEAN', title: 'Ph√≥ Tr∆∞·ªüng khoa', grade: '4' },
            { code: 'HEAD_DEPT', title: 'Tr∆∞·ªüng b·ªô m√¥n', grade: '5' },
            { code: 'LECTURER', title: 'Gi·∫£ng vi√™n', grade: '6' },
            { code: 'SENIOR_LECTURER', title: 'Gi·∫£ng vi√™n ch√≠nh', grade: '6' },
            { code: 'ASSOCIATE_PROF', title: 'Ph√≥ Gi√°o s∆∞', grade: '7' },
            { code: 'PROFESSOR', title: 'Gi√°o s∆∞', grade: '8' },
            { code: 'STAFF', title: 'Nh√¢n vi√™n', grade: '9' },
            { code: 'ADMIN', title: 'Qu·∫£n tr·ªã vi√™n', grade: '10' },
        ];

        const createdPositions = {};

        for (const pos of positions) {
            let position = await prisma.job_positions.findFirst({
                where: { code: pos.code }
            });

            if (position) {
                position = await prisma.job_positions.update({
                    where: { id: position.id },
                    data: { title: pos.title, grade: pos.grade }
                });
            } else {
                position = await prisma.job_positions.create({
                    data: {
                        code: pos.code,
                        title: pos.title,
                        grade: pos.grade
                    }
                });
            }

            createdPositions[pos.code] = position;
            console.log(`  ‚úÖ ${pos.title} (${pos.code})`);
        }

        // 3. T·∫°o Academic Titles
        console.log('\nüéì T·∫°o h·ªçc h√†m h·ªçc v·ªã...');

        const academicTitles = [
            { code: 'GS', title: 'Gi√°o s∆∞' },
            { code: 'PGS', title: 'Ph√≥ Gi√°o s∆∞' },
            { code: 'TS', title: 'Ti·∫øn sƒ©' },
            { code: 'THS', title: 'Th·∫°c sƒ©' },
            { code: 'CN', title: 'C·ª≠ nh√¢n' },
            { code: 'KS', title: 'K·ªπ s∆∞' },
        ];

        const createdAcademicTitles = {};

        for (const title of academicTitles) {
            let academicTitle = await prisma.academic_titles.findFirst({
                where: { code: title.code }
            });

            if (academicTitle) {
                academicTitle = await prisma.academic_titles.update({
                    where: { id: academicTitle.id },
                    data: { title: title.title }
                });
            } else {
                academicTitle = await prisma.academic_titles.create({
                    data: {
                        code: title.code,
                        title: title.title
                    }
                });
            }

            createdAcademicTitles[title.code] = academicTitle;
            console.log(`  ‚úÖ ${title.title} (${title.code})`);
        }

        // 4. T·∫°o Users v√† Employees
        console.log('\nüë• T·∫°o users v√† employees...');

        const users = [
            // Admin
            { username: 'admin', full_name: 'Admin System', email: 'admin@phenikaa.edu.vn', role: 'ADMIN', org_unit: 'PHENIKAA', position: 'ADMIN' },

            // Hi·ªáu tr∆∞·ªüng
            { username: 'rector', full_name: 'GS.TS. Nguy·ªÖn VƒÉn Hi·ªáu tr∆∞·ªüng', email: 'rector@phenikaa.edu.vn', role: 'RECTOR', org_unit: 'PHENIKAA', position: 'RECTOR' },

            // Tr∆∞·ªüng khoa ICT
            { username: 'dean_ict', full_name: 'PGS.TS. Tr·∫ßn VƒÉn Tr∆∞·ªüng ICT', email: 'dean.ict@phenikaa.edu.vn', role: 'DEAN', org_unit: 'ICT', position: 'DEAN' },

            // Tr∆∞·ªüng khoa SE
            { username: 'dean_se', full_name: 'TS. L√™ Th·ªã Tr∆∞·ªüng SE', email: 'dean.se@phenikaa.edu.vn', role: 'DEAN', org_unit: 'SE', position: 'DEAN' },

            // Tr∆∞·ªüng khoa IS
            { username: 'dean_is', full_name: 'TS. Ph·∫°m VƒÉn Tr∆∞·ªüng IS', email: 'dean.is@phenikaa.edu.vn', role: 'DEAN', org_unit: 'IS', position: 'DEAN' },

            // Tr∆∞·ªüng khoa MED
            { username: 'dean_med', full_name: 'GS.TS. Nguy·ªÖn Th·ªã Tr∆∞·ªüng MED', email: 'dean.med@phenikaa.edu.vn', role: 'DEAN', org_unit: 'MED', position: 'DEAN' },

            // Tr∆∞·ªüng b·ªô m√¥n
            { username: 'head_swe', full_name: 'TS. V≈© VƒÉn Tr∆∞·ªüng SWE', email: 'head.swe@phenikaa.edu.vn', role: 'HEAD_DEPARTMENT', org_unit: 'SWE', position: 'HEAD_DEPT' },
            { username: 'head_db', full_name: 'TS. Ho√†ng Th·ªã Tr∆∞·ªüng DB', email: 'head.db@phenikaa.edu.vn', role: 'HEAD_DEPARTMENT', org_unit: 'DB', position: 'HEAD_DEPT' },

            // Gi·∫£ng vi√™n
            { username: 'lecturer_1', full_name: 'TS. Nguy·ªÖn VƒÉn Gi·∫£ng vi√™n 1', email: 'lecturer1@phenikaa.edu.vn', role: 'LECTURER', org_unit: 'SWE', position: 'LECTURER' },
            { username: 'lecturer_2', full_name: 'THS. Tr·∫ßn Th·ªã Gi·∫£ng vi√™n 2', email: 'lecturer2@phenikaa.edu.vn', role: 'LECTURER', org_unit: 'DB', position: 'LECTURER' },
            { username: 'lecturer_3', full_name: 'TS. L√™ VƒÉn Gi·∫£ng vi√™n 3', email: 'lecturer3@phenikaa.edu.vn', role: 'LECTURER', org_unit: 'ECOM', position: 'LECTURER' },
            { username: 'lecturer_4', full_name: 'PGS.TS. Ph·∫°m Th·ªã Gi·∫£ng vi√™n 4', email: 'lecturer4@phenikaa.edu.vn', role: 'LECTURER', org_unit: 'PHARM', position: 'SENIOR_LECTURER' },

            // Nh√¢n vi√™n
            { username: 'staff_1', full_name: 'Nguy·ªÖn VƒÉn Nh√¢n vi√™n 1', email: 'staff1@phenikaa.edu.vn', role: 'STAFF', org_unit: 'ICT', position: 'STAFF' },
            { username: 'staff_2', full_name: 'Tr·∫ßn Th·ªã Nh√¢n vi√™n 2', email: 'staff2@phenikaa.edu.vn', role: 'STAFF', org_unit: 'MED', position: 'STAFF' },

            // Sinh vi√™n
            { username: 'student_1', full_name: 'L√™ VƒÉn Sinh vi√™n 1', email: 'student1@phenikaa.edu.vn', role: 'STUDENT', org_unit: null, position: null },
            { username: 'student_2', full_name: 'Ph·∫°m Th·ªã Sinh vi√™n 2', email: 'student2@phenikaa.edu.vn', role: 'STUDENT', org_unit: null, position: null },
        ];

        const createdUsers = {};

        for (const userData of users) {
            // T·∫°o user
            const hashedPassword = await bcrypt.hash('123456', 10);

            const user = await prisma.user.upsert({
                where: { username: userData.username },
                update: {
                    full_name: userData.full_name,
                    email: userData.email,
                    password_hash: hashedPassword
                },
                create: {
                    username: userData.username,
                    full_name: userData.full_name,
                    email: userData.email,
                    password_hash: hashedPassword,
                    status: 'ACTIVE'
                }
            });

            createdUsers[userData.username] = user;
            console.log(`  ‚úÖ User: ${userData.full_name} (${userData.username})`);

            // T·∫°o employee n·∫øu c√≥ org_unit
            if (userData.org_unit && userData.position) {
                let employee = await prisma.employee.findFirst({
                    where: { user_id: user.id }
                });

                if (!employee) {
                    employee = await prisma.employee.create({
                        data: {
                            user_id: user.id,
                            employee_no: `EMP${user.id.toString().padStart(4, '0')}`,
                            employment_type: userData.position.includes('LECTURER') ? 'lecturer' : 'staff',
                            status: 'ACTIVE',
                            hired_at: new Date()
                        }
                    });
                    console.log(`    üë§ Created employee: ${employee.employee_no}`);
                }

                // T·∫°o org assignment
                const orgUnit = createdOrgUnits[userData.org_unit];
                const position = createdPositions[userData.position];

                if (orgUnit && position && employee) {
                    console.log(`    üîç Creating assignment: employee_id=${employee.id}, org_unit_id=${orgUnit.id}, position_id=${position.id}`);

                    const existingAssignment = await prisma.orgAssignment.findFirst({
                        where: {
                            employee_id: employee.id,
                            org_unit_id: orgUnit.id
                        }
                    });

                    if (!existingAssignment) {
                        await prisma.orgAssignment.create({
                            data: {
                                employee_id: employee.id,
                                org_unit_id: orgUnit.id,
                                position_id: position.id,
                                assignment_type: userData.position === 'ADMIN' ? 'admin' : 'academic',
                                is_primary: true,
                                start_date: new Date()
                            }
                        });
                        console.log(`    ‚úÖ Created org assignment`);
                    } else {
                        console.log(`    ‚ö†Ô∏è  Assignment already exists`);
                    }

                    console.log(`    üìç Assigned to: ${orgUnit.name} as ${position.title}`);
                } else {
                    console.log(`    ‚ùå Missing data: orgUnit=${!!orgUnit}, position=${!!position}, employee=${!!employee}`);
                }
            }
        }

        // 5. Assign roles to users
        console.log('\nüé≠ Assign roles to users...');

        const roleAssignments = [
            { username: 'admin', role: 'ADMIN' },
            { username: 'rector', role: 'RECTOR' },
            { username: 'dean_ict', role: 'DEAN' },
            { username: 'dean_se', role: 'DEAN' },
            { username: 'dean_is', role: 'DEAN' },
            { username: 'dean_med', role: 'DEAN' },
            { username: 'head_swe', role: 'HEAD_DEPARTMENT' },
            { username: 'head_db', role: 'HEAD_DEPARTMENT' },
            { username: 'lecturer_1', role: 'LECTURER' },
            { username: 'lecturer_2', role: 'LECTURER' },
            { username: 'lecturer_3', role: 'LECTURER' },
            { username: 'lecturer_4', role: 'LECTURER' },
            { username: 'staff_1', role: 'STAFF' },
            { username: 'staff_2', role: 'STAFF' },
            { username: 'student_1', role: 'STUDENT' },
            { username: 'student_2', role: 'STUDENT' },
        ];

        for (const assignment of roleAssignments) {
            const user = createdUsers[assignment.username];
            const role = await prisma.roles.findFirst({
                where: { code: assignment.role }
            });

            if (user && role) {
                await prisma.user_role.upsert({
                    where: {
                        user_id_role_id: {
                            user_id: user.id,
                            role_id: role.id
                        }
                    },
                    update: {},
                    create: {
                        user_id: user.id,
                        role_id: role.id
                    }
                });

                console.log(`  ‚úÖ ${user.full_name} ‚Üí ${role.name}`);
            }
        }

        // 6. T·∫°o Academic Title assignments
        console.log('\nüéì Assign academic titles...');

        const academicAssignments = [
            { username: 'rector', title: 'GS' },
            { username: 'dean_ict', title: 'PGS' },
            { username: 'dean_se', title: 'TS' },
            { username: 'dean_is', title: 'TS' },
            { username: 'dean_med', title: 'GS' },
            { username: 'head_swe', title: 'TS' },
            { username: 'head_db', title: 'TS' },
            { username: 'lecturer_1', title: 'TS' },
            { username: 'lecturer_2', title: 'THS' },
            { username: 'lecturer_3', title: 'TS' },
            { username: 'lecturer_4', title: 'PGS' },
        ];

        for (const assignment of academicAssignments) {
            const user = createdUsers[assignment.username];
            const title = createdAcademicTitles[assignment.title];

            if (user && title) {
                const employee = await prisma.employee.findFirst({
                    where: { user_id: user.id }
                });

                if (employee) {
                    await prisma.employee_academic_title.upsert({
                        where: {
                            employee_id_academic_title_id: {
                                employee_id: employee.id,
                                academic_title_id: title.id
                            }
                        },
                        update: {},
                        create: {
                            employee_id: employee.id,
                            academic_title_id: title.id,
                            granted_date: new Date(),
                            status: 'active'
                        }
                    });

                    console.log(`  ‚úÖ ${user.full_name} ‚Üí ${title.title}`);
                }
            }
        }

        console.log('\nüéâ Ho√†n th√†nh import data chu·∫©n thi·∫øt k·∫ø!');
        console.log('\nüìä T√≥m t·∫Øt:');
        console.log(`  üè¢ Organizational Units: ${Object.keys(createdOrgUnits).length}`);
        console.log(`  üëî Job Positions: ${Object.keys(createdPositions).length}`);
        console.log(`  üéì Academic Titles: ${Object.keys(createdAcademicTitles).length}`);
        console.log(`  üë• Users: ${Object.keys(createdUsers).length}`);

        console.log('\nüîë Test accounts:');
        console.log('  üëë Admin: admin / 123456');
        console.log('  üéì Rector: rector / 123456');
        console.log('  üè´ Dean ICT: dean_ict / 123456');
        console.log('  üè´ Dean SE: dean_se / 123456');
        console.log('  üë®‚Äçüè´ Lecturer: lecturer_1 / 123456');
        console.log('  üë®‚Äçüíº Staff: staff_1 / 123456');
        console.log('  üéì Student: student_1 / 123456');

    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        await prisma.$disconnect();
    }
}

importStandardData();
