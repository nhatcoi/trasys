const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addAllMedicalAssignments() {
    try {
        console.log('üè• Th√™m t·∫•t c·∫£ assignments cho Tr∆∞·ªùng Y D∆∞·ª£c...\n');

        // 1. Disable trigger
        console.log('üîÑ Disable trigger...');
        await prisma.$executeRaw`
            ALTER TABLE hr.org_assignment DISABLE TRIGGER trg_hr_org_assignment_log;
        `;
        console.log('‚úÖ ƒê√£ disable trigger');

        // 2. L·∫•y existing employees
        const employees = await prisma.employee.findMany({
            include: {
                user: true
            },
            take: 4
        });

        console.log('\nüìã Found employees:');
        employees.forEach((emp, index) => {
            console.log(`  ${index + 1}. ${emp.user?.full_name} (ID: ${emp.id})`);
        });

        // 3. T·∫°o assignments m·ªõi
        const newAssignments = [
            {
                employeeId: employees[1].id, // L√™ VƒÉn Gi·∫£ng
                orgUnitId: 28, // Tr∆∞·ªùng Y D∆∞·ª£c
                positionId: 9, // VICE_RECTOR
                assignmentType: 'admin',
                description: 'Ph√≥ Hi·ªáu tr∆∞·ªüng Tr∆∞·ªùng Y D∆∞·ª£c'
            },
            {
                employeeId: employees[2].id, // Tr·∫ßn Th·ªã Hi·ªáu
                orgUnitId: 29, // Khoa D∆∞·ª£c
                positionId: 1, // HEAD_FAC
                assignmentType: 'admin',
                description: 'Tr∆∞·ªüng khoa D∆∞·ª£c'
            },
            {
                employeeId: employees[3].id, // Nguy·ªÖn Th·ªã Minh
                orgUnitId: 30, // Khoa ƒêi·ªÅu d∆∞·ª°ng
                positionId: 1, // HEAD_FAC
                assignmentType: 'admin',
                description: 'Tr∆∞·ªüng khoa ƒêi·ªÅu d∆∞·ª°ng'
            }
        ];

        console.log('\nüîÑ T·∫°o assignments m·ªõi...');
        for (const assignment of newAssignments) {
            try {
                await prisma.$executeRaw`
                    INSERT INTO hr.org_assignment (
                        employee_id, 
                        org_unit_id, 
                        position_id, 
                        assignment_type, 
                        is_primary, 
                        allocation, 
                        start_date
                    ) VALUES (
                        ${assignment.employeeId},
                        ${assignment.orgUnitId},
                        ${assignment.positionId},
                        ${assignment.assignmentType},
                        true,
                        1.00,
                        '2020-01-01'::date
                    );
                `;
                console.log(`‚úÖ ${assignment.description}: ${employees.find(emp => emp.id === assignment.employeeId)?.user?.full_name}`);
            } catch (error) {
                console.log(`‚ùå L·ªói ${assignment.description}: ${error.message}`);
            }
        }

        // 4. Th√™m gi·∫£ng vi√™n cho Khoa D∆∞·ª£c
        const pharmacyLecturers = await prisma.employee.findMany({
            include: {
                user: true
            },
            skip: 4,
            take: 2
        });

        console.log('\nüîÑ Th√™m gi·∫£ng vi√™n Khoa D∆∞·ª£c...');
        for (const lecturer of pharmacyLecturers) {
            try {
                await prisma.$executeRaw`
                    INSERT INTO hr.org_assignment (
                        employee_id, 
                        org_unit_id, 
                        position_id, 
                        assignment_type, 
                        is_primary, 
                        allocation, 
                        start_date
                    ) VALUES (
                        ${lecturer.id},
                        29,
                        5,
                        'academic',
                        true,
                        1.00,
                        '2020-01-01'::date
                    );
                `;
                console.log(`‚úÖ Gi·∫£ng vi√™n Khoa D∆∞·ª£c: ${lecturer.user?.full_name}`);
            } catch (error) {
                console.log(`‚ùå L·ªói gi·∫£ng vi√™n Khoa D∆∞·ª£c: ${error.message}`);
            }
        }

        // 5. Th√™m gi·∫£ng vi√™n cho Khoa ƒêi·ªÅu d∆∞·ª°ng
        const nursingLecturers = await prisma.employee.findMany({
            include: {
                user: true
            },
            skip: 6,
            take: 2
        });

        console.log('\nüîÑ Th√™m gi·∫£ng vi√™n Khoa ƒêi·ªÅu d∆∞·ª°ng...');
        for (const lecturer of nursingLecturers) {
            try {
                await prisma.$executeRaw`
                    INSERT INTO hr.org_assignment (
                        employee_id, 
                        org_unit_id, 
                        position_id, 
                        assignment_type, 
                        is_primary, 
                        allocation, 
                        start_date
                    ) VALUES (
                        ${lecturer.id},
                        30,
                        5,
                        'academic',
                        true,
                        1.00,
                        '2020-01-01'::date
                    );
                `;
                console.log(`‚úÖ Gi·∫£ng vi√™n Khoa ƒêi·ªÅu d∆∞·ª°ng: ${lecturer.user?.full_name}`);
            } catch (error) {
                console.log(`‚ùå L·ªói gi·∫£ng vi√™n Khoa ƒêi·ªÅu d∆∞·ª°ng: ${error.message}`);
            }
        }

        // 6. Enable l·∫°i trigger
        console.log('\nüîÑ Enable l·∫°i trigger...');
        await prisma.$executeRaw`
            ALTER TABLE hr.org_assignment ENABLE TRIGGER trg_hr_org_assignment_log;
        `;
        console.log('‚úÖ ƒê√£ enable l·∫°i trigger');

        // 7. Ki·ªÉm tra k·∫øt qu·∫£
        console.log('\nüìã Ki·ªÉm tra k·∫øt qu·∫£:');
        const results = await prisma.$queryRaw`
            SELECT 
                oa.id,
                e.employee_no,
                u.full_name,
                ou.name as org_unit_name,
                jp.title as position_title,
                oa.assignment_type
            FROM hr.org_assignment oa
            JOIN hr.employees e ON oa.employee_id = e.id
            JOIN public.users u ON e.user_id = u.id
            JOIN public.org_units ou ON oa.org_unit_id = ou.id
            LEFT JOIN hr.job_positions jp ON oa.position_id = jp.id
            WHERE ou.id IN (28, 29, 30)
            ORDER BY ou.id, oa.id;
        `;

        results.forEach(result => {
            console.log(`  - ${result.full_name} -> ${result.org_unit_name} (${result.position_title})`);
        });

        console.log('\nüéâ Ho√†n th√†nh! ƒê√£ th√™m t·∫•t c·∫£ assignments cho Tr∆∞·ªùng Y D∆∞·ª£c');

    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        console.error('Chi ti·∫øt:', error);

        // Enable l·∫°i trigger n·∫øu c√≥ l·ªói
        try {
            await prisma.$executeRaw`
                ALTER TABLE hr.org_assignment ENABLE TRIGGER trg_hr_org_assignment_log;
            `;
            console.log('‚úÖ ƒê√£ enable l·∫°i trigger sau l·ªói');
        } catch (enableError) {
            console.log('‚ùå L·ªói enable trigger:', enableError.message);
        }
    } finally {
        await prisma.$disconnect();
    }
}

addAllMedicalAssignments();

