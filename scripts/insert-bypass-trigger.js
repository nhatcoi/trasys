const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function insertBypassTrigger() {
    try {
        console.log('üè• Th·ª≠ insert bypass trigger...\n');

        // 1. T·∫°m th·ªùi disable trigger
        console.log('üîÑ Disable trigger...');
        await prisma.$executeRaw`
            ALTER TABLE hr.org_assignment DISABLE TRIGGER trg_hr_org_assignment_log;
        `;
        console.log('‚úÖ ƒê√£ disable trigger');

        // 2. Th·ª≠ insert
        console.log('\nüîÑ Th·ª≠ insert...');
        await prisma.$executeRaw`
            INSERT INTO hr.org_assignment (
                employee_id, 
                org_unit_id, 
                position_id, 
                assignment_type, 
                is_primary, 
                allocation, 
                start_date
            ) VALUES (
                2,
                28,
                8,
                'admin',
                true,
                1.00,
                '2020-01-01'::date
            );
        `;
        console.log('‚úÖ Insert th√†nh c√¥ng!');

        // 3. Enable l·∫°i trigger
        console.log('\nüîÑ Enable l·∫°i trigger...');
        await prisma.$executeRaw`
            ALTER TABLE hr.org_assignment ENABLE TRIGGER trg_hr_org_assignment_log;
        `;
        console.log('‚úÖ ƒê√£ enable l·∫°i trigger');

        // 4. Ki·ªÉm tra k·∫øt qu·∫£
        console.log('\nüìã Ki·ªÉm tra k·∫øt qu·∫£:');
        const results = await prisma.$queryRaw`
            SELECT 
                oa.id,
                e.employee_no,
                u.full_name,
                ou.name as org_unit_name,
                jp.title as position_title,
                oa.assignment_type
            FROM hr.org_assignment oa
            JOIN hr.employees e ON oa.employee_id = e.id
            JOIN public.users u ON e.user_id = u.id
            JOIN public.org_units ou ON oa.org_unit_id = ou.id
            LEFT JOIN hr.job_positions jp ON oa.position_id = jp.id
            WHERE ou.id IN (28, 29, 30)
            ORDER BY ou.id, oa.id;
        `;

        results.forEach(result => {
            console.log(`  - ${result.full_name} -> ${result.org_unit_name} (${result.position_title})`);
        });

        console.log('\nüéâ Ho√†n th√†nh! ƒê√£ insert th√†nh c√¥ng');

    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        console.error('Chi ti·∫øt:', error);

        // Enable l·∫°i trigger n·∫øu c√≥ l·ªói
        try {
            await prisma.$executeRaw`
                ALTER TABLE hr.org_assignment ENABLE TRIGGER trg_hr_org_assignment_log;
            `;
            console.log('‚úÖ ƒê√£ enable l·∫°i trigger sau l·ªói');
        } catch (enableError) {
            console.log('‚ùå L·ªói enable trigger:', enableError.message);
        }
    } finally {
        await prisma.$disconnect();
    }
}

insertBypassTrigger();

