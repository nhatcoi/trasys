const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

// ƒê·ªãnh nghƒ©a accounts cho t·ª´ng role
const accountsByRole = {
    ADMIN: [
        {
            username: 'admin_system',
            email: 'admin@university.edu.vn',
            full_name: 'Nguy·ªÖn VƒÉn Admin',
            password: 'admin123',
            phone: '0123456789',
            address: 'H√† N·ªôi',
            dob: new Date('1980-01-01'),
            gender: 'MALE'
        },
        {
            username: 'super_admin',
            email: 'superadmin@university.edu.vn',
            full_name: 'Tr·∫ßn Th·ªã Super Admin',
            password: 'superadmin123',
            phone: '0987654321',
            address: 'TP.HCM',
            dob: new Date('1975-05-15'),
            gender: 'FEMALE'
        }
    ],
    HEAD_FACULTY: [
        {
            username: 'truong_khoa_cn',
            email: 'truongkhoa.cn@university.edu.vn',
            full_name: 'GS.TS. L√™ VƒÉn Tr∆∞·ªüng Khoa CN',
            password: 'truongkhoa123',
            phone: '0123456780',
            address: 'H√† N·ªôi',
            dob: new Date('1970-03-20'),
            gender: 'MALE'
        },
        {
            username: 'truong_khoa_kt',
            email: 'truongkhoa.kt@university.edu.vn',
            full_name: 'PGS.TS. Nguy·ªÖn Th·ªã Tr∆∞·ªüng Khoa KT',
            password: 'truongkhoa123',
            phone: '0123456781',
            address: 'H√† N·ªôi',
            dob: new Date('1972-07-10'),
            gender: 'FEMALE'
        }
    ],
    LECTURER: [
        {
            username: 'giang_vien_1',
            email: 'giangvien1@university.edu.vn',
            full_name: 'TS. Ph·∫°m VƒÉn Gi·∫£ng Vi√™n',
            password: 'giangvien123',
            phone: '0123456782',
            address: 'H√† N·ªôi',
            dob: new Date('1985-09-15'),
            gender: 'MALE'
        },
        {
            username: 'giang_vien_2',
            email: 'giangvien2@university.edu.vn',
            full_name: 'ThS. Tr·∫ßn Th·ªã Gi·∫£ng Vi√™n',
            password: 'giangvien123',
            phone: '0123456783',
            address: 'H√† N·ªôi',
            dob: new Date('1988-12-05'),
            gender: 'FEMALE'
        },
        {
            username: 'giang_vien_3',
            email: 'giangvien3@university.edu.vn',
            full_name: 'TS. L√™ VƒÉn Gi·∫£ng Vi√™n',
            password: 'giangvien123',
            phone: '0123456784',
            address: 'H√† N·ªôi',
            dob: new Date('1983-04-25'),
            gender: 'MALE'
        }
    ],
    STAFF: [
        {
            username: 'nhan_vien_hr',
            email: 'nhanvien.hr@university.edu.vn',
            full_name: 'Nguy·ªÖn Th·ªã Nh√¢n Vi√™n HR',
            password: 'nhanvien123',
            phone: '0123456785',
            address: 'H√† N·ªôi',
            dob: new Date('1990-06-30'),
            gender: 'FEMALE'
        },
        {
            username: 'nhan_vien_admin',
            email: 'nhanvien.admin@university.edu.vn',
            full_name: 'Tr·∫ßn VƒÉn Nh√¢n Vi√™n Admin',
            password: 'nhanvien123',
            phone: '0123456786',
            address: 'H√† N·ªôi',
            dob: new Date('1987-11-12'),
            gender: 'MALE'
        },
        {
            username: 'nhan_vien_ke_toan',
            email: 'nhanvien.ketoan@university.edu.vn',
            full_name: 'Ph·∫°m Th·ªã Nh√¢n Vi√™n K·∫ø To√°n',
            password: 'nhanvien123',
            phone: '0123456787',
            address: 'H√† N·ªôi',
            dob: new Date('1992-08-18'),
            gender: 'FEMALE'
        }
    ],
    STUDENT: [
        {
            username: 'sinh_vien_1',
            email: 'sinhvien1@student.university.edu.vn',
            full_name: 'Nguy·ªÖn VƒÉn Sinh Vi√™n',
            password: 'sinhvien123',
            phone: '0123456788',
            address: 'H√† N·ªôi',
            dob: new Date('2000-01-15'),
            gender: 'MALE'
        },
        {
            username: 'sinh_vien_2',
            email: 'sinhvien2@student.university.edu.vn',
            full_name: 'Tr·∫ßn Th·ªã Sinh Vi√™n',
            password: 'sinhvien123',
            phone: '0123456789',
            address: 'H√† N·ªôi',
            dob: new Date('2001-03-20'),
            gender: 'FEMALE'
        },
        {
            username: 'sinh_vien_3',
            email: 'sinhvien3@student.university.edu.vn',
            full_name: 'L√™ VƒÉn Sinh Vi√™n',
            password: 'sinhvien123',
            phone: '0123456790',
            address: 'H√† N·ªôi',
            dob: new Date('2000-07-10'),
            gender: 'MALE'
        },
        {
            username: 'sinh_vien_4',
            email: 'sinhvien4@student.university.edu.vn',
            full_name: 'Ph·∫°m Th·ªã Sinh Vi√™n',
            password: 'sinhvien123',
            phone: '0123456791',
            address: 'H√† N·ªôi',
            dob: new Date('2001-09-25'),
            gender: 'FEMALE'
        }
    ]
};

async function hashPassword(password) {
    const saltRounds = 10;
    return await bcrypt.hash(password, saltRounds);
}

async function insertAccountsByRole() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu insert accounts theo role...\n');

        // L·∫•y danh s√°ch roles
        const roles = await prisma.roles.findMany();
        console.log('üìã Danh s√°ch roles hi·ªán c√≥:');
        roles.forEach(role => console.log(`- ${role.code}: ${role.name}`));
        console.log('');

        let totalInserted = 0;

        for (const [roleCode, accounts] of Object.entries(accountsByRole)) {
            console.log(`\nüîπ X·ª≠ l√Ω role: ${roleCode}`);

            // T√¨m role
            const role = roles.find(r => r.code === roleCode);
            if (!role) {
                console.log(`‚ùå Kh√¥ng t√¨m th·∫•y role: ${roleCode}`);
                continue;
            }

            console.log(`‚úÖ T√¨m th·∫•y role: ${role.name}`);

            for (const accountData of accounts) {
                try {
                    // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
                    const existingUser = await prisma.user.findUnique({
                        where: { username: accountData.username }
                    });

                    if (existingUser) {
                        console.log(`‚ö†Ô∏è  Username ${accountData.username} ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
                        continue;
                    }

                    // Hash password
                    const hashedPassword = await hashPassword(accountData.password);

                    // T·∫°o user
                    const user = await prisma.user.create({
                        data: {
                            username: accountData.username,
                            email: accountData.email,
                            password_hash: hashedPassword,
                            full_name: accountData.full_name,
                            phone: accountData.phone,
                            address: accountData.address,
                            dob: accountData.dob,
                            gender: accountData.gender,
                            status: 'ACTIVE'
                        }
                    });

                    // G√°n role cho user
                    await prisma.user_role.create({
                        data: {
                            user_id: user.id,
                            role_id: role.id
                        }
                    });

                    console.log(`‚úÖ ƒê√£ t·∫°o account: ${accountData.username} (${accountData.full_name}) v·ªõi role ${roleCode}`);
                    totalInserted++;

                } catch (error) {
                    console.log(`‚ùå L·ªói khi t·∫°o account ${accountData.username}:`, error.message);
                }
            }
        }

        console.log(`\nüéâ Ho√†n th√†nh! ƒê√£ t·∫°o ${totalInserted} accounts m·ªõi.`);

        // Hi·ªÉn th·ªã th·ªëng k√™
        console.log('\nüìä Th·ªëng k√™ accounts theo role:');
        for (const [roleCode, accounts] of Object.entries(accountsByRole)) {
            const role = roles.find(r => r.code === roleCode);
            if (role) {
                const userCount = await prisma.user_role.count({
                    where: { role_id: role.id }
                });
                console.log(`- ${roleCode}: ${userCount} users`);
            }
        }

    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y script
insertAccountsByRole();
