const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function showAccountsSummary() {
    try {
        console.log('üìä T√ìM T·∫ÆT ACCOUNTS THEO ROLE\n');

        // L·∫•y danh s√°ch roles
        const roles = await prisma.roles.findMany({
            orderBy: { code: 'asc' }
        });

        let totalUsers = 0;
        let totalEmployees = 0;

        for (const role of roles) {
            console.log(`\nüîπ ROLE: ${role.code} - ${role.name}`);
            console.log('='.repeat(50));

            // L·∫•y users c√≥ role n√†y
            const userRoles = await prisma.user_role.findMany({
                where: { role_id: role.id },
                include: {
                    users: {
                        include: {
                            employees: true
                        }
                    }
                }
            });

            console.log(`üìã T·ªïng s·ªë users: ${userRoles.length}`);

            if (userRoles.length > 0) {
                console.log('\nüë• Danh s√°ch users:');
                userRoles.forEach((userRole, index) => {
                    const user = userRole.users;
                    const employee = user.employees[0];

                    console.log(`\n${index + 1}. ${user.full_name}`);
                    console.log(`   üë§ Username: ${user.username}`);
                    console.log(`   üìß Email: ${user.email || 'N/A'}`);
                    console.log(`   üì± Phone: ${user.phone || 'N/A'}`);
                    console.log(`   üè† Address: ${user.address || 'N/A'}`);
                    console.log(`   üìÖ DOB: ${user.dob ? user.dob.toLocaleDateString('vi-VN') : 'N/A'}`);
                    console.log(`   ‚öß Gender: ${user.gender || 'N/A'}`);
                    console.log(`   üìä Status: ${user.status}`);

                    if (employee) {
                        console.log(`   üè¢ Employee ID: ${employee.id}`);
                        console.log(`   üíº Employee No: ${employee.employee_no}`);
                        console.log(`   üìã Employment Type: ${employee.employment_type}`);
                        console.log(`   üìÖ Hired At: ${employee.hired_at ? employee.hired_at.toLocaleDateString('vi-VN') : 'N/A'}`);
                        console.log(`   üìä Employee Status: ${employee.status}`);
                        totalEmployees++;
                    } else {
                        console.log(`   üè¢ Employee: Ch∆∞a c√≥ employee record`);
                    }
                });
            }

            totalUsers += userRoles.length;
        }

        console.log('\n' + '='.repeat(60));
        console.log('üìä T·ªîNG K·∫æT:');
        console.log(`üë• T·ªïng s·ªë users: ${totalUsers}`);
        console.log(`üè¢ T·ªïng s·ªë employees: ${totalEmployees}`);
        console.log(`üìã T·ªïng s·ªë roles: ${roles.length}`);

        // Hi·ªÉn th·ªã th·ªëng k√™ theo employment type
        console.log('\nüìä TH·ªêNG K√ä THEO EMPLOYMENT TYPE:');
        const employmentStats = await prisma.employee.groupBy({
            by: ['employment_type'],
            _count: {
                employment_type: true
            }
        });

        employmentStats.forEach(stat => {
            console.log(`- ${stat.employment_type}: ${stat._count.employment_type} employees`);
        });

        // Hi·ªÉn th·ªã th·ªëng k√™ theo status
        console.log('\nüìä TH·ªêNG K√ä THEO STATUS:');
        const statusStats = await prisma.employee.groupBy({
            by: ['status'],
            _count: {
                status: true
            }
        });

        statusStats.forEach(stat => {
            console.log(`- ${stat.status}: ${stat._count.status} employees`);
        });

    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// Ch·∫°y script
showAccountsSummary();
